../src/algo.c:209:  if(!QUEUE_CARD(sol->queue)){
../src/algo.c:210:    fprintf(stderr, "sol->queue is empty\n");
../src/algo.c:214:  best = sol_score(sol, sol->queue->data[sol->queue->bot]);
../src/algo.c:218:  QUEUE_ITER(sol->queue, v){
../src/algo.c:263:  q_card = QUEUE_CARD(sol->queue);
../src/algo.c:266:    fprintf(stderr, "sol->queue is empty\n");
../src/algo.c:275:  QUEUE_ITER(sol->queue, v){
../src/algo.h:60: *    in sol->queue.
../src/algo.h:61: * Require : sol->must not be empty*/
../src/algo.h:64:/* Ensure : return an index of an random chosen elt in sol->queue. 
../src/algo.h:70: *    a float array of length sol->prob ->n */
../src/problem.c:82:  int res = graph_is_connected_subgraph(sol->prob->connect, sol->ind);
../src/problem.c:91:  if(sol->cover[i] < sol->prob->k)
../src/problem.c:94:  FOR_ALL_NEIGH(sol->prob->cover, i, v){
../src/problem.c:95:    if(sol->cover[*v] <  sol->prob->k)
../src/problem.c:123:  cur = queue_pop_id(sol->queue, i);
../src/problem.c:127:  IND_UNSET(sol->in_queue, cur);
../src/problem.c:130:  IND_SET(sol->ind, cur);
../src/problem.c:132:  sol->card ++;
../src/problem.c:135:  FOR_ALL_NEIGH(sol->prob->connect, cur, v){
../src/problem.c:137:    if(!(IND_TEST(sol->in_queue, *v) || IND_TEST(sol->ind, *v))){
../src/problem.c:138:      queue_push(sol->queue, *v);
../src/problem.c:139:      IND_SET(sol->in_queue, *v);
../src/problem.c:145:  sol->cover[cur] ++;
../src/problem.c:147:  if((sol->cover[cur] == sol->prob->k))
../src/problem.c:148:    sol->remaining --;
../src/problem.c:150:  FOR_ALL_NEIGH(sol->prob->cover, cur, v){
../src/problem.c:151:    sol->cover[cur] ++;
../src/problem.c:152:    if((sol->cover[*v] = sol->prob->k))
../src/problem.c:153:      sol->remaining --;
../src/problem.c:179:  qcard = QUEUE_CARD(sol->queue);
../src/problem.c:180:  nb_neigh = sol->card + qcard;
../src/problem.c:190:    for(k=0; k<sol->prob->n; k++){
../src/problem.c:191:      if(IND_TEST(sol->ind, k)){
../src/problem.c:201:    FOR_ALL_NEIGH(sol->prob->cover, rd, v){
../src/problem.c:202:      if((sol->cover[*v]-1) < (int)k)
../src/problem.c:207:    IND_UNSET(sol->ind, rd);
../src/problem.c:210:      sol->card --;
../src/problem.c:211:      queue_push(sol->queue, rd);
../src/problem.c:212:      IND_SET(sol->in_queue, rd);
../src/problem.c:213:      FOR_ALL_NEIGH(sol->prob->cover, rd, v)
../src/problem.c:214:        sol->cover[*v] --;
../src/problem.c:219:      IND_SET(sol->ind, rd);
../src/problem.c:226:  prob_free(sol->prob);
../src/problem.c:228:  free(sol->in_queue);
../src/problem.c:229:  sol->in_queue = NULL;
../src/problem.c:232:/*   free(sol->ind);
../src/problem.c:233: *   sol->ind = NULL;
../src/problem.c:237:  queue_free(sol->queue);
../src/problem.c:238:  free(sol->cover);
../src/problem.c:239:  sol->cover = NULL;
../src/problem.h:67:#define SOL_COVERS(sol) (sol->remaining <= 0)
../src/problem.h:73: * Require : i < sol->prob->n*/
../src/test-greedy.c:33:  printf("card sol = %d\n", sol->card);
